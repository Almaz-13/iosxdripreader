<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		actionBarVisible="true"
		initialize="onInitialize()"
		destructionPolicy="never"
		xmlns:s="library://ns.adobe.com/flex/spark" >
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.dialog.Dialog;
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.builders.AlertBuilder;
			import com.distriqt.extension.dialog.events.DialogViewEvent;
			import com.distriqt.extension.dialog.objects.DialogAction;
			import com.hurlant.crypto.hash.SHA1;
			import com.hurlant.util.Hex;
			
			import spark.primitives.Rect;
			
			import Utilities.Trace;
			
			import databaseclasses.BgReading;
			import databaseclasses.CommonSettings;
			import databaseclasses.LocalSettings;
			
			import events.SettingsServiceEvent;
			
			import model.ModelLocator;
			
			import services.DialogService;
			[ResourceBundle("settingsview")]
			[ResourceBundle("calibrationservice")]
			[ResourceBundle("alarmservice")]
						
			[Bindable]
			private static var detailedTracingOnOrOffText:String = "";
			[Bindable]
			private static var additionalCalibrationRequestOnOrOffText:String = "";
			[Bindable]
			private static var nsLogOnOffText:String = "";
			[Bindable]
			private static var alwaysOnNotificationTextOnOrOff:String = "";
			[Bindable]
			private static var chosenUnitText:String = "";
			[Bindable]
			private static var lowValueText:String = "";
			[Bindable]
			private static var highValueText:String = "";
			[Bindable]
			private static var nightScoutUrl:String = "";
			[Bindable]
			private static var nightScoutAPI_SECRET:String = "";
			[Bindable]
			private static var transmitterIdText:String="";
			[Bindable]
			private static var transmitterTypeText:String="";
			[Bindable]
			private static var versionText:String="";
			
			private static var resetColorTimer:Timer;
			
			private function onInitialize():void {
				title = ModelLocator.resourceManagerInstance.getString('settingsview','title');
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED) == "true") {
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					groupEnableAndDisableTracing.alpha = 0.25;
					groupsendTracingViaEmail.alpha = 1;
				} else {
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
					groupEnableAndDisableTracing.alpha = 1;
					groupsendTracingViaEmail.alpha = 0.25;
				}
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true") {
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mgdl');
				} else {
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mmol');
				}
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) != "true") {
					lowValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK))))) * 10)) / 10).toString();
					highValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK))))) * 10)) / 10).toString();
				} else {
					lowValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK);
					highValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK);
				}
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT) == "true") {
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG) == "true") {
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION) == "true") {
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				nightScoutUrl = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME);
				nightScoutAPI_SECRET = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_API_SECRET);
				
				transmitterIdText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID);
				transmitterTypeText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE);
				
				LocalSettings.instance.addEventListener(SettingsServiceEvent.SETTING_CHANGED, settingChanged);
				
				versionText = ModelLocator.resourceManagerInstance.getString('general','version');
			}
			
			private static function settingChanged(event:SettingsServiceEvent):void {
				if (event.data == CommonSettings.COMMON_SETTING_TRANSMITTER_ID) {
					transmitterIdText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID);
				} else if (event.data == CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) {
					transmitterTypeText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE);
				}
			}
			
			protected function sendTracingViaEmail_clickHandler(event:MouseEvent):void {
				rect9.color = uint("0xD3D3D3");
				rect10.color = uint("0xD3D3D3");
				setResetColorTimer();
				Trace.sendTraceFile();
				LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED, "false");
				detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				groupEnableAndDisableTracing.alpha = 1;
				groupsendTracingViaEmail.alpha = 0.25;
			}
			
			protected function detailedTracing_clickHandler(event:MouseEvent):void {
				rect7.color = uint("0xD3D3D3");
				rect8.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED) == "true") {
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED, "true");
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					groupEnableAndDisableTracing.alpha = 0.25;
					groupsendTracingViaEmail.alpha = 1;
				}
			}
			
			private function nightScoutUrl_clickHandler(event:MouseEvent):void {
				rect1.color = uint("0xD3D3D3");
				rect2.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_url_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_url_message"))
					.addTextField(nightScoutUrl,"")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, nightscouturlentered);
				
				function nightscouturlentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					
					if (event.values.length < 1)
						return;
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME, event.values[0] as String);
					nightScoutUrl = event.values[0] as String;
				}
			}
			
			private function nightScoutApiSecret_clickHandler(event:MouseEvent):void {
				rect3.color = uint("0xD3D3D3");
				rect4.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_api_secret_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_api_secret_message"))
					.addTextField(nightScoutAPI_SECRET, "")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, apisecretentered);
				
				function apisecretentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					var hash:SHA1 = new SHA1();
					var result:String = Hex.fromArray(hash.hash(Hex.toArray(Hex.fromString(event.values[0] as String))));
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_API_SECRET, event.values[0] as String);
					nightScoutAPI_SECRET = event.values[0] as String;
				}
			}
			
			private function changeUnit_clickHandler(event:MouseEvent):void {
				rect13.color = uint("0xD3D3D3");
				rect14.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL, "false");
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mmol');
					lowValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK))))) * 10)) / 10).toString();
					highValueText = (Math.round(((BgReading.mgdlToMmol((new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK))))) * 10)) / 10).toString();
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL, "true");
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mgdl');
					lowValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK);
					highValueText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK);
				}
			}
			
			private function changeLowValue_clickHandler(event:MouseEvent):void {
				rect15.color = uint("0xD3D3D3");
				rect16.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","low_value"))
					.addTextField("", ModelLocator.resourceManagerInstance.getString("settingsview","low_value"))
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				alert.addEventListener(DialogViewEvent.CLOSED, lowValueentered);
				DialogService.addDialog(alert);
			}
			
			private static function lowValueentered(event:DialogViewEvent):void {
				if (event.index == 1) {
					return;
				}
				
				var asNumber:Number = new Number(event.values[0] as String);
				if (isNaN(asNumber)) {
					//add the warning message
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","low_value"))
						.setMessage(ModelLocator.resourceManagerInstance.getString("calibrationservice","value_should_be_numeric"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert);
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK,
						CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ?
						asNumber.toString() 
						: ((Math.round(BgReading.mmolToMgdl(asNumber)) * 10) / 10).toString());
					lowValueText = asNumber.toString();
				}
			}
			
			private function changeHighValue_clickHandler(event:MouseEvent):void {
				rect17.color = uint("0xD3D3D3");
				rect18.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","high_value"))
					.addTextField("", ModelLocator.resourceManagerInstance.getString("settingsview","high_value"))
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				alert.addEventListener(DialogViewEvent.CLOSED, highValueentered);
				DialogService.addDialog(alert);
			}
			
			private static function highValueentered(event:DialogViewEvent):void {
				if (event.index == 1) {
					return;
				}
				
				var asNumber:Number = new Number(event.values[0] as String);
				if (isNaN(asNumber)) {
					//add the warning message
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","high_value"))
						.setMessage(ModelLocator.resourceManagerInstance.getString("calibrationservice","value_should_be_numeric"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert);
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK,
						CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true" ?
						asNumber.toString() 
						: ((Math.round(BgReading.mmolToMgdl(asNumber)) * 10) / 10).toString());
					highValueText = asNumber.toString();
				}
			}
			
			private function additionalCalibrationRequestAlert_clickHandler(event:MouseEvent):void {
				rect11.color = uint("0xD3D3D3");
				rect12.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT, "false");
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT, "true");
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function alwaysOnNotification_clickHandler(event:MouseEvent):void {
				rect19.color = uint("0xD3D3D3");
				rect20.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION) == "true") {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION, "false");
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_ALWAYS_ON_NOTIFICATION, "true");
					alwaysOnNotificationTextOnOrOff = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function lowAlert_clickHandler(event:MouseEvent):void {
				rect29.color = uint("0xD3D3D3");
				rect30.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","low_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_LOW_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_low_alert');
				dataToSend.isBgValue = true;
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_low_alert_list');
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			private function highAlert_clickHandler(event:MouseEvent):void {
				rect33.color = uint("0xD3D3D3");
				rect34.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","high_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_HIGH_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_high_alert');
				dataToSend.isBgValue = true;
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_high_alert');
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
			}
			
			private function missedReadingAlert_clickHandler(event:MouseEvent):void {
				rect35.color = uint("0xD3D3D3");
				rect36.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				var dataToSend:Object = new Object();
				dataToSend.title = ModelLocator.resourceManagerInstance.getString("settingsview","missed_reading_alert");
				dataToSend.topText = ModelLocator.resourceManagerInstance.getString("settingsview","alert_top_text");
				dataToSend.settingid = CommonSettings.COMMON_SETTING_MISSED_READING_ALERT;
				dataToSend.titleforFromtimeAndValueElementView = "";
				dataToSend.topTextforFromtimeAndValueElementView = ModelLocator.resourceManagerInstance.getString('settingsview','edit_missed_reading_alert');
				dataToSend.isBgValue = false;
				dataToSend.unit = ModelLocator.resourceManagerInstance.getString('alarmservice','minutes');
				dataToSend.additionalTopText = ModelLocator.resourceManagerInstance.getString('settingsview','explain_missed_reading_alert');
				
				navigator.pushView(FromtimeAndValueListView,dataToSend);
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_MISSED_READING_WARNING_GIVEN) == "false") {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('settingsview',"warning"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('settingsview',"warng_missed_reading_needs_internet"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert);
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_MISSED_READING_WARNING_GIVEN,"true");
				}
			}
			
			private function alertTypes_clickHandler(event:MouseEvent):void {
				rect31.color = uint("0xD3D3D3");
				rect32.color = uint("0xD3D3D3");
				
				setResetColorTimer();
				navigator.pushView(AlertTypesView);
			}
			
			public static function requestNewTransmitterId(calledFromHomeView:Boolean = false):void {
				var title:String = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) + " " +
					ModelLocator.resourceManagerInstance.getString("transmitterservice","transmitter_id_settings_title");
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(title)
					.setMessage(ModelLocator.resourceManagerInstance.getString("transmitterservice","enter_transmitter_id"))
					.addTextField("",CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID))
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, transmitterIdEntered);
				
				function transmitterIdEntered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					var idLength:Number = (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE)) == "G5" ? 6:5
					if ((event.values[0] as String).length != idLength) {
						var alertMessage:String =
							(ModelLocator.resourceManagerInstance.getString("transmitterservice","transmitter_id_should_be_five_chars")).replace("{max}", idLength.toString());
						if (calledFromHomeView) {
							alertMessage += " " + (ModelLocator.resourceManagerInstance.getString("transmitterservice","set_transmitter_id_in_settings"));
						}
						var alert:DialogView = Dialog.service.create(
							new AlertBuilder()
							.setTitle(ModelLocator.resourceManagerInstance.getString("transmitterservice","enter_transmitter_id_dialog_title"))
							.setMessage(alertMessage)
							.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
							.build()
						);
						DialogService.addDialog(alert);
					} else {
						CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID, (event.values[0] as String).toUpperCase());
						transmitterIdText = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_TRANSMITTER_ID);
					}
				}
			}
			
			private function changeTransmitterId_clickHandler(event:MouseEvent):void {
				rect21.color = uint("0xD3D3D3");
				rect22.color = uint("0xD3D3D3");
				setResetColorTimer();
				requestNewTransmitterId();
			}
			
			private function changeTransmitterType_clickHandler(event:MouseEvent):void {
				rect27.color = uint("0xD3D3D3");
				rect28.color = uint("0xD3D3D3");
				setResetColorTimer();
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) == "G4") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE, "G5");
					transmitterTypeText = "G5";
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE, "G4");
					transmitterTypeText = "G4";
				}
				//no need to request new transmitter id here, this will be initiated from homeview which is listening
				//changes in setting COMMON_SETTING_PERIPHERAL_TYPE
			}
			
			private function NSLog_clickHandler(event:MouseEvent):void {
				rect25.color = uint("0xD3D3D3");
				rect26.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG) == "true") {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG, "false");
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_NSLOG, "true");
					nsLogOnOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function setResetColorTimer():void {
				if (resetColorTimer != null)
					if (resetColorTimer.running) {
						resetColorTimer.stop();					
					}
				
				resetColorTimer = new Timer(100, 1);
				resetColorTimer.addEventListener(TimerEvent.TIMER, resetColor);
				resetColorTimer.start();
				
				function resetColor(event:Event):void {
					rect1.color = uint("0x212121");
					rect2.color = uint("0x212121");
					rect3.color = uint("0x212121");
					rect4.color = uint("0x212121");
					rect7.color = uint("0x212121");
					rect8.color = uint("0x212121");
					rect9.color = uint("0x212121");
					rect10.color = uint("0x212121");
					rect11.color = uint("0x212121");
					rect12.color = uint("0x212121");
					rect13.color = uint("0x212121");
					rect14.color = uint("0x212121");
					rect15.color = uint("0x212121");
					rect16.color = uint("0x212121");
					rect17.color = uint("0x212121");
					rect18.color = uint("0x212121");
					rect19.color = uint("0x212121");
					rect20.color = uint("0x212121");
					rect21.color = uint("0x212121");
					rect22.color = uint("0x212121");
					rect23.color = uint("0x212121");
					rect24.color = uint("0x212121");
					rect25.color = uint("0x212121");
					rect26.color = uint("0x212121");
					rect27.color = uint("0x212121");
					rect28.color = uint("0x212121");
					rect29.color = uint("0x212121");
					rect30.color = uint("0x212121");
					rect31.color = uint("0x212121");//alert types
					rect32.color = uint("0x212121");//alert types
					rect33.color = uint("0x212121");//high alert
					rect34.color = uint("0x212121");//high alert
					rect35.color = uint("0x212121");//missed reading alert
					rect36.color = uint("0x212121");//missed reading alert
				}
			}
			
		]]>
	</fx:Script>
	<s:Scroller width="100%" height="100%" >
		<s:VGroup width="100%" paddingTop="10">
	
			<!-- Chapter general settings -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','general_settings')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			<!-- Chapter general settings Subsection chosen unit -->
			<s:VGroup click="changeUnit_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect13"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','unit')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{chosenUnitText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect14"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			<!-- Chapter general settings Subsection low value -->
			<s:VGroup click="changeLowValue_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect15"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','low_value')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{lowValueText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect16"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			<!-- Chapter general settings Subsection high value -->
			<s:VGroup click="changeHighValue_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect17"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','high_value')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{highValueText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect18"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection Always HomeScreen Notification -->
			<s:VGroup click="alwaysOnNotification_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect19"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','always_on_notification')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{alwaysOnNotificationTextOnOrOff}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect20"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter general settings Subsection transmitter type -->
			<s:VGroup click="changeTransmitterType_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect27"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','transmitter_type_settings_title')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{transmitterTypeText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect28"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter general settings Subsection transmitter Id -->
			<s:VGroup click="changeTransmitterId_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect21"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('transmitterservice','transmitter_id_settings_title')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{transmitterIdText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect22"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts-->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','alerts')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Alerts Subsection Alert Types -->
			<s:VGroup click="alertTypes_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect31"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','alert_types')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect32"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#FFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter Alerts Subsection Additional Calibration Request Alert -->
			<s:VGroup click="additionalCalibrationRequestAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect11"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','additional_calibration_request')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{additionalCalibrationRequestOnOrOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect12"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			<!-- Chapter Alerts Subsection Low -->
			<s:VGroup click="lowAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect29"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','low_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect30"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection High -->
			<s:VGroup click="highAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect33"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','high_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect34"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Alerts Subsection Missed Reading -->
			<s:VGroup click="missedReadingAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect35"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','missed_reading_alert')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect36"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0X3B6999" weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter NightScout -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','show_nightscout_title')}" textAlign="center" color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke  color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Nightscout url and api secret --> 
			<s:VGroup width="100%">
				<!-- button to change url -->
				<s:HGroup click="nightScoutUrl_clickHandler(event)" width="100%" verticalAlign="bottom" id="targetGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect1"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','url')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nightScoutUrl}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect2"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to change api secret -->
				<s:HGroup click="nightScoutApiSecret_clickHandler(event)" width="100%" verticalAlign="bottom">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect3"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','api_secret')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nightScoutAPI_SECRET}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect4"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Version info --> 
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','versioninfo')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>

			<!-- Chapter Version info subsection version --> 
			<s:VGroup width="100%" >
				<!-- button to enable tracing -->
				<s:HGroup id="groupInfo" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect23"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','version')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{versionText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect24"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
			
			<!-- Chapter Logging and Tracing-->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','logging_and_tracing')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Logging and Tracing  Subsection Tracing --> 
			<s:VGroup width="100%" visible="true" enabled="true">
				<!-- button to enable tracing -->
				<s:HGroup id="groupEnableAndDisableTracing" click="detailedTracing_clickHandler(event)" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect7"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','detailed_tracing')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{detailedTracingOnOrOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect8"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to send tracing via e-mail -->
				<s:HGroup id="groupsendTracingViaEmail" click="sendTracingViaEmail_clickHandler(event)" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect9"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','send_tracing_via_email')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect10"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter Logging and Tracing  Subsection NSLog -->
			<s:VGroup click="NSLog_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect25"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','ns_logging')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nsLogOnOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect26"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter XYZ-->
		</s:VGroup>
	</s:Scroller>
</s:View>

