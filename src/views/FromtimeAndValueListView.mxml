<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2017  Johan Degraeve

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		creationComplete="view1_creationCompleteHandler(event)"
		add="addHandler()"
		xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("fromtimeandvaluelistview")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.dialog.Dialog;
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.builders.AlertBuilder;
			import com.distriqt.extension.dialog.events.DialogViewEvent;
			import com.distriqt.extension.dialog.objects.DialogAction;
			
			import mx.events.FlexEvent;
			
			import spark.components.View;
			import spark.events.IndexChangeEvent;
			
			import Utilities.FromtimeAndValue;
			import Utilities.FromtimeAndValueArrayCollection;
			
			import databaseclasses.CommonSettings;
			
			import events.PickerEvent;
			
			import model.ModelLocator;
			
			import renderers.FromtimeAndValueItemRenderer;
			
			import services.DialogService;
			
			[Bindable]
			private var back_label:String;
			
			private var _listOfElements:FromtimeAndValueArrayCollection;
			
			private var deleteClicked:Boolean;
			private var editClicked:Boolean;
			private var addClicked:Boolean;
			private var thisView:View;
			
			[Bindable]
			/**
			 * list of elements, should be list of FromtimeAndValue objects
			 */
			public function get listOfElements():FromtimeAndValueArrayCollection
			{
				return _listOfElements;
			}
			
			/**
			 * @private
			 */
			public function set listOfElements(value:FromtimeAndValueArrayCollection):void
			{
				_listOfElements = value;
			}
			
			
			[Bindable]
			/**
			 * topText shown on top of the view.
			 */private var topText:String;
			
			private const CONTEXT_EDIT_LIST_ELEMENT:String = "context_edit_list_element";
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				thisView = this;
				back_label = resourceManager.getString('general','back');
				if (data.title)
					title = data.title;
				if (!listOfElements)
					//if listOfElements is not null, then it means listOfElements has already been assigned in addhandler, so no need to check again on the data.settingid value
					//this would only reset the list to the initial value, as it still exists in the settings
					if (data.settingid) {
						//expecting the settingid that contains the list to be edit
						listOfElements =  FromtimeAndValueArrayCollection.createList(
							CommonSettings.getCommonSetting(new Number(data.settingid)));
						listOfElements.setArrayChangedToFalse();
					}
				if (data.topText)
					topText = data.topText;
				list.addEventListener(FromtimeAndValueItemRenderer.DELETE_CLICKED,deleteTheSelectedItem);
				list.addEventListener(FromtimeAndValueItemRenderer.EDIT_CLICKED,editTheSelectedItem);
				list.addEventListener(FromtimeAndValueItemRenderer.ADD_CLICKED,addANewItem);
			}
			
			private function deleteTheSelectedItem(event:Event):void {
				deleteClicked = true;
			}
			
			private function addANewItem(event:Event):void  {
				addClicked = true;
			}
			
			private function editTheSelectedItem(event:Event):void {
				editClicked = true;
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				var dataToSend:Object = new Object;
				dataToSend.title = data.titleforFromtimeAndValueElementView;
				dataToSend.topText = data.topTextforFromtimeAndValueElementView;
				if (deleteClicked) {
					listOfElements.removeItemAt(event.newIndex);
					deleteClicked = false;
				} else if (editClicked) {
					dataToSend.selectedIndex = event.newIndex;
					dataToSend.listOfElements = listOfElements;
					navigator.pushView(FromtimeAndValueElementView,dataToSend,CONTEXT_EDIT_LIST_ELEMENT);
					editClicked = false;
				} else if (addClicked)  {
					var clickedItem:FromtimeAndValue = listOfElements.getItemAt(event.newIndex) as FromtimeAndValue;
					listOfElements.addItem(new FromtimeAndValue(clickedItem.from + 60,clickedItem.value,clickedItem.alarmName,true,true));
					dataToSend.selectedIndex = event.newIndex + 1;//tricky here, if everything goes right, the new element should be at event.newIndex +1
					dataToSend.listOfElements = listOfElements;
					navigator.pushView(FromtimeAndValueElementView,dataToSend,CONTEXT_EDIT_LIST_ELEMENT);
					addClicked = false;
				}
			}
			
			private function addHandler():void {
				if (navigator.poppedViewReturnedObject != null) {
					if (navigator.poppedViewReturnedObject.context != null) {
						if (navigator.poppedViewReturnedObject.context == CONTEXT_EDIT_LIST_ELEMENT) {
							if (navigator.poppedViewReturnedObject.object != null) {
								listOfElements = navigator.poppedViewReturnedObject.object as FromtimeAndValueArrayCollection;				
							}
						}
					}
				}
			}
			
			private function okClicked(e:MouseEvent = null):void {
				if (listOfElements.arrayChanged) {
					CommonSettings.setCommonSetting(data.settingid, listOfElements.createAlarmString());
				}
				navigator.popView();
			}
			
			protected function back_clickHandler(event:MouseEvent):void
			{
				if (listOfElements.arrayChanged) {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('fromtimeandvalueelementview',"savechanges"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('fromtimeandvalueelementview',"savechanges"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.addOption(ModelLocator.resourceManagerInstance.getString("general","no"), DialogAction.STYLE_CANCEL, 1)
						.build()
					);
					alert.addEventListener(DialogViewEvent.CLOSED, onYesClicked);
					alert.addEventListener(DialogViewEvent.CANCELLED, onNoClicked);
					DialogService.addDialog(alert);
				} else {
					navigator.popView();
				}
				
				function onYesClicked(event:Event): void
				{
					okClicked();
				}
				
				function onNoClicked(event:Event): void
				{
					navigator.popView();
				}
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="{ModelLocator.imageDone}" id="OkButton" click="okClicked(event)"/>
	</s:actionContent>

	<s:Scroller width="100%" height="100%" >
		<s:VGroup width="100%" paddingTop="10">
			<s:Label text="@{topText}"  textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			<s:List id="list" width="100%" height="100%" itemRenderer="renderers.FromtimeAndValueItemRenderer"
					dataProvider="{listOfElements}" 
					change="list_changeHandler(event)"
					scrollSnappingMode="leadingEdge">
			</s:List>
			<!-- Alert Value  this is good for fromtimeandvalueelementview >
			<s:VGroup click="alertValueClickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect11"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('fromtimeandvaluelistview','value')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{alertValueText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect12"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup-->
		</s:VGroup>
	</s:Scroller>
</s:View>
