<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		actionBarVisible="true"
		initialize="onInitialize()"
		destructionPolicy="never"
		xmlns:s="library://ns.adobe.com/flex/spark" >
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.dialog.Dialog;
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.builders.AlertBuilder;
			import com.distriqt.extension.dialog.events.DialogViewEvent;
			import com.distriqt.extension.dialog.objects.DialogAction;
			import com.hurlant.crypto.hash.SHA1;
			import com.hurlant.util.Hex;
			
			import spark.primitives.Rect;
			
			import Utilities.Trace;
			
			import databaseclasses.CommonSettings;
			import databaseclasses.LocalSettings;
			
			import model.ModelLocator;
			
			import services.DialogService;
			[ResourceBundle("settingsview")]
			
			[Bindable]
			private static var detailedTracingOnOrOffText:String = "";
			[Bindable]
			private static var additionalCalibrationRequestOnOrOffText:String = "";
			[Bindable]
			private static var chosenUnitText:String = "";
			[Bindable]
			private static var nightScoutUrl:String = "";
			[Bindable]
			private static var nightScoutAPI_SECRET:String = "";
			
			private static var resetColorTimer:Timer;
			
			private function onInitialize():void {
				title = ModelLocator.resourceManagerInstance.getString('settingsview','title');
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED) == "true") {
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					groupEnableAndDisableTracing.alpha = 0.25;
					groupsendTracingViaEmail.alpha = 1;
				} else {
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
					groupEnableAndDisableTracing.alpha = 1;
					groupsendTracingViaEmail.alpha = 0.25;
				}
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true") {
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mgdl');
				} else {
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mmol');
				}
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT) == "true") {
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				} else {
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				}
				
				nightScoutUrl = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME);
				nightScoutAPI_SECRET = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_API_SECRET);
			}
			
			protected function showLogging_clickHandler(event:MouseEvent):void
			{
				rect5.color = uint("0xD3D3D3");
				rect6.color = uint("0xD3D3D3");
				setResetColorTimer();
				navigator.pushView(LoggingView);
			}
			
			protected function sendTracingViaEmail_clickHandler(event:MouseEvent):void {
				rect9.color = uint("0xD3D3D3");
				rect10.color = uint("0xD3D3D3");
				setResetColorTimer();
				Trace.sendTraceFile();
				LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED, "false");
				detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				groupEnableAndDisableTracing.alpha = 1;
				groupsendTracingViaEmail.alpha = 0.25;
			}
			
			protected function detailedTracing_clickHandler(event:MouseEvent):void {
				rect7.color = uint("0xD3D3D3");
				rect8.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED) == "true") {
				} else {
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_DETAILED_TRACING_ENABLED, "true");
					detailedTracingOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
					groupEnableAndDisableTracing.alpha = 0.25;
					groupsendTracingViaEmail.alpha = 1;
				}
			}
			
			private function nightScoutUrl_clickHandler(event:MouseEvent):void {
				rect1.color = uint("0xD3D3D3");
				rect2.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_url_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_url_message"))
					.addTextField(nightScoutUrl,"")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, nightscouturlentered);
				
				function nightscouturlentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					
					if (event.values.length < 1)
						return;
					
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_AZURE_WEBSITE_NAME, event.values[0] as String);
					nightScoutUrl = event.values[0] as String;
				}
			}
			
			private function nightScoutApiSecret_clickHandler(event:MouseEvent):void {
				rect3.color = uint("0xD3D3D3");
				rect4.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_api_secret_title"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("settingsview","enter_nightscout_api_secret_message"))
					.addTextField(nightScoutAPI_SECRET, "")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, apisecretentered);
				
				function apisecretentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					var hash:SHA1 = new SHA1();
					var result:String = Hex.fromArray(hash.hash(Hex.toArray(Hex.fromString(event.values[0] as String))));

					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_API_SECRET, event.values[0] as String);
					nightScoutAPI_SECRET = event.values[0] as String;
				}
			}
			
			private function changeUnit_clickHandler(event:MouseEvent):void {
				rect13.color = uint("0xD3D3D3");
				rect14.color = uint("0xD3D3D3");
				setResetColorTimer();
				
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL, "false");
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mmol');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL, "true");
					chosenUnitText = ModelLocator.resourceManagerInstance.getString('settingsview','mgdl');
				}
			}
			
			private function additionalCalibrationRequestAlert_clickHandler(event:MouseEvent):void {
				rect11.color = uint("0xD3D3D3");
				rect12.color = uint("0xD3D3D3");
				setResetColorTimer();

				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT) == "true") {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT, "false");
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','off');
				} else {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_ADDITIONAL_CALIBRATION_REQUEST_ALERT, "true");
					additionalCalibrationRequestOnOrOffText = ModelLocator.resourceManagerInstance.getString('settingsview','on');
				}
			}
			
			private function setResetColorTimer():void {
				if (resetColorTimer != null)
					if (resetColorTimer.running) {
						resetColorTimer.stop();					
					}
				
				resetColorTimer = new Timer(100, 1);
				resetColorTimer.addEventListener(TimerEvent.TIMER, resetColor);
				resetColorTimer.start();
				
				function resetColor(event:Event):void {
					rect1.color = uint("0x212121");
					rect2.color = uint("0x212121");
					rect3.color = uint("0x212121");
					rect4.color = uint("0x212121");
					rect5.color = uint("0x212121");
					rect6.color = uint("0x212121");
					rect7.color = uint("0x212121");
					rect8.color = uint("0x212121");
					rect9.color = uint("0x212121");
					rect10.color = uint("0x212121");
					rect11.color = uint("0x212121");
					rect12.color = uint("0x212121");
					rect13.color = uint("0x212121");
					rect14.color = uint("0x212121");
				}
			}
			
		]]>
	</fx:Script>
	<s:Scroller width="100%" height="100%" >
		<s:VGroup width="100%" paddingTop="10">
			
			<!-- Chapter Alerts-->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','alerts')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			<!-- Chapter Alerts Subsection Additional Calibration Request Alert -->
			<s:VGroup click="additionalCalibrationRequestAlert_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect11"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','additional_calibration_request')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{additionalCalibrationRequestOnOrOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect12"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter unit -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','unit')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			<!-- Chapter unit Subsection chosen unit -->
			<s:VGroup click="changeUnit_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect13"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','chosen_unit')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{chosenUnitText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect14"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter NightScout -->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','show_nightscout_title')}" textAlign="center" color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke  color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Nightscout url and api secret --> 
			<s:VGroup width="100%">
				<!-- button to change url -->
				<s:HGroup click="nightScoutUrl_clickHandler(event)" width="100%" verticalAlign="bottom" id="targetGroup">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect1"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','url')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nightScoutUrl}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect2"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to change api secret -->
				<s:HGroup click="nightScoutApiSecret_clickHandler(event)" width="100%" verticalAlign="bottom">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect3"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','api_secret')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{nightScoutAPI_SECRET}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="14"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect4"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="#3B6999"  weight="3"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Logging and Tracing-->
			<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','logging_and_tracing')}" textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- Chapter Logging and Tracing  Subection Show logging -->
			<s:VGroup click="showLogging_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect5"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','show_logging')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect6"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			<!-- Chapter Logging and Tracing  Subsection Tracing --> 
			<s:VGroup width="100%" visible="false" enabled="false">
				<!-- button to enable tracing -->
				<s:HGroup id="groupEnableAndDisableTracing" click="detailedTracing_clickHandler(event)" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect7"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','detailed_tracing')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{detailedTracingOnOrOffText}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect8"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>
				<!-- button to send tracing via e-mail -->
				<s:HGroup id="groupsendTracingViaEmail" click="sendTracingViaEmail_clickHandler(event)" width="100%" >
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect9"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('settingsview','send_tracing_via_email')}" 
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect10"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>

			<!-- Chapter XYZ-->
		</s:VGroup>
	</s:Scroller>
</s:View>

