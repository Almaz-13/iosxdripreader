<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2017  Johan Degraeve

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:charts="mx.charts.*"
		xmlns:series="mx.charts.series.*"
		xmlns:chartClasses="mx.charts.chartClasses.*" 
		title=""
		initialize="initializeHandler(event)"
		destructionPolicy="never"
		creationComplete="onCreationComplete(event)" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<s:states>
		<s:State name="bluetoothred"/>
		<s:State name="bluetoothgreen"/>
		<s:State name="bluetoothorange"/>
		<s:State name="G5"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.bluetoothle.BluetoothLE;
			import com.distriqt.extension.bluetoothle.BluetoothLEState;
			import com.distriqt.extension.bluetoothle.events.BluetoothLEEvent;
			import com.distriqt.extension.bluetoothle.events.PeripheralEvent;
			import com.distriqt.extension.dialog.DateTimeDialogView;
			import com.distriqt.extension.dialog.Dialog;
			import com.distriqt.extension.dialog.DialogType;
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.builders.ActionSheetBuilder;
			import com.distriqt.extension.dialog.builders.AlertBuilder;
			import com.distriqt.extension.dialog.builders.DateTimeDialogBuilder;
			import com.distriqt.extension.dialog.events.DialogDateTimeEvent;
			import com.distriqt.extension.dialog.events.DialogViewEvent;
			import com.distriqt.extension.dialog.objects.DialogAction;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.ElementExistenceEvent;
			import spark.formatters.DateTimeFormatter;
			
			import G4Model.TransmitterStatus;
			
			import G5Model.TransmitterStatus;
			
			import Utilities.BgGraphBuilder;
			import Utilities.Trace;
			
			import databaseclasses.BgReading;
			import databaseclasses.BlueToothDevice;
			import databaseclasses.Calibration;
			import databaseclasses.CommonSettings;
			import databaseclasses.Database;
			import databaseclasses.LocalSettings;
			import databaseclasses.Sensor;
			
			import events.BlueToothServiceEvent;
			import events.CalibrationServiceEvent;
			import events.DatabaseEvent;
			import events.DialogServiceEvent;
			import events.NotificationServiceEvent;
			import events.SettingsServiceEvent;
			import events.TransmitterServiceEvent;
			
			import model.ModelLocator;
			
			import services.BluetoothService;
			import services.CalibrationService;
			import services.DialogService;
			import services.NotificationService;
			import services.TransmitterService;
			
			[ResourceBundle('homeview')]
			[ResourceBundle("general")]
			[ResourceBundle("settingsview")]
			
			private static var initialStart:Boolean = true;
			[Bindable]
			private static var currentBgLabelText:String = "---";
			[Bindable]
			private static var minutesAgoText:String = "";
			[Bindable]
			private static var deltaValueText:String = "---";
			[Bindable]
			private static var _calibrateButtonActive:Boolean = false;
			private static const ACTION_SHEET_INDEX_FOR_SCAN_FOR_DEVICE:int = 0;
			private static const ACTION_SHEET_INDEX_FOR_FORGET_DEVICE:int = 1;
			private static const ACTION_SHEET_INDEX_FOR_START_SENSOR:int = 2;
			private static const ACTION_SHEET_INDEX_FOR_STOP_SENSOR:int = 3;
			private static const ACTION_SHEET_INDEX_FOR_STATUS:int = 4;
			private static const ACTION_SHEET_INDEX_FOR_CANCEL:int = 6;
			
			private static const UPDATE_DISPLAY_INFO_EVERY_X_SECONDS:int = 15;
			
			/**
			 * Bg reading is expected every 5 minutes<br>
			 * xbridge holds data for 1 minute, so it could be that bgreading arrives 6 minutes before previous one<br>
			 * adding 10 seconds<br>
			 * This will only start once the first bgreading is received. So it can not be used as long as the xdrip is not scanned and a first reading is received<br>
			 *  
			 */
			public static const DELAY_FOR_CHECKING_BGREADING_IN_SECONDS:int = (5 + 1) * 60 + 10;
			
			//local time, ie if it's here and now 12:20 the 2nd of April 2017, then Hours = 12, ...
			private static var sensorStartSeconds:int = 0;
			private static var sensorStartMinutes:int = 0;
			private static var sensorStartHours:int = 0;
			private static var userSelectedTime:Boolean = false;
			private static var sensorStartDate:int = 0;
			private static var sensorStartYear:int = 0;
			private static var sensorStartMonth:int = 0;//starts at 0 for January
			
			private static var currentInfoUpdateTimer:Timer;
			
			
			public static var _peripheralConnected:Boolean = false;
			/**
			 * timestamp that has changed connection status<br> 
			 */
			private static var peripheralConnectionStatusChangeTimestamp:Number = (new Date()).valueOf();
			private static var scanningWasUserInitiated:Boolean = false;
			
			[Bindable]
			private static var currentBgLabellinethrough:Boolean = false;
			[Bindable]
			private static var currentBgLabelColor:int = 0xFFFFFF;
			
			[Bindable]
			private var chartValues:ArrayCollection;
			
			protected var webView:StageWebView = new StageWebView();
			
			/**
			 * connected or not. Should be replaced by if (BluetoothService.getActiveBluetoothPeripheral().state == PeripheralState.CONNECTED)<br>
			 * but this last one is not working see https://github.com/distriqt/ANE-BluetoothLE/issues/8
			 */
			public static function get peripheralConnected():Boolean
			{
				return _peripheralConnected;
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				ModelLocator.navigator = navigator;
				//navigator.addEventListener(ElementExistenceEvent.ELEMENT_ADD )
				if (initialStart) {
					Trace.init();
					Database.instance.addEventListener(DatabaseEvent.DATABASE_INIT_FINISHED_EVENT,onInitResult);
					Database.instance.addEventListener(DatabaseEvent.ERROR_EVENT,onInitError);
					//need to know when modellocator is populated, then we can also update display
					Database.instance.addEventListener(DatabaseEvent.BGREADING_RETRIEVAL_EVENT, bgReadingReceivedFromDatabase);
					Database.init();
					initialStart = false;
					CommonSettings.instance.addEventListener(SettingsServiceEvent.SETTING_CHANGED, settingChanged);
				} else {
					//force now a check if the icon needs tobe changed by calling bluetoothStateChangedHandler, even though it may not have changed
					bluetoothStateChangedHandler(null);
					
					//set info
					displayCurrentInfoFromReading();
					
					//start timer to check for delay since last receipt of bgreading
					restartCurrentInfoUpdateTimer();
				}
				
				function settingChanged(event:SettingsServiceEvent):void {
					if (event.data == CommonSettings.COMMON_SETTING_DO_MGDL 
						|| 
						event.data == CommonSettings.COMMON_SETTING_HIGH_MARK 
						|| 
						event.data == CommonSettings.COMMON_SETTING_LOW_MARK) {
						displayCurrentInfoFromReading();
					} else if (event.data == CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) {
						BlueToothDevice.forgetBlueToothDevice();
						SettingsView.requestNewTransmitterId();
						if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) == "G5") {
							currentState = "G5";
							BluetoothService.isDexcomG5 = true;
							if (BluetoothLE.service.centralManager.state == BluetoothLEState.STATE_ON) {
								if (!BluetoothLE.service.centralManager.isScanning) {
									BluetoothService.startScanning();
								}
								showG5InfoScreen();
							}
						} else {
							showG4InfoScreen();
							bluetoothStateChangedHandler(null);
						}
					}
				}
				
				function bgReadingReceivedFromDatabase(de:DatabaseEvent):void {
					if (de.data != null)
						if (de.data is String) {
							if (de.data as String == Database.END_OF_RESULT) {
								displayCurrentInfoFromReading();
								restartCurrentInfoUpdateTimer();
							}
						}
				} 
				
				function onInitResult(event:Event):void
				{
					trace("HomeView : database init result ok");
					//at this moment the database is intialised, but the logs, bgreadings, ... might still be read in the ModelLocator, Modellocator is listening to the same event
					
					//set calibration button in the correct state
					if (Calibration.allForSensor().length > 1) {
						_calibrateButtonActive = true;
					}
					
					BluetoothService.instance.addEventListener(BlueToothServiceEvent.BLUETOOTH_SERVICE_INITIATED, blueToothServiceInitiated);
					
					TransmitterService.instance.addEventListener(TransmitterServiceEvent.BGREADING_EVENT, transmitterServiceBGReadingEventReceived);
					
					CalibrationService.instance.addEventListener(CalibrationServiceEvent.INITIAL_CALIBRATION_EVENT, initialCalibrationEventReceived);
					CalibrationService.instance.addEventListener(CalibrationServiceEvent.NEW_CALIBRATION_EVENT, newCalibrationEventReceived);
					
					if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) == "G5")
						currentState = "G5";
				}
				
				function onInitError(event:Event):void
				{	
					trace("HomeView : database init error");
				}
			}
			
			public static function notificationServiceInitiated(ev:NotificationServiceEvent):void {
				NotificationService.updateAllNotifications(null);
				if (DialogService.isInitiated) {
					dialogServiceInitiated(null);
				} else {
					DialogService.instance.addEventListener(DialogServiceEvent.DIALOG_SERVICE_INITIATED_EVENT, dialogServiceInitiated);
					DialogService.instance.addEventListener(DialogServiceEvent.DIALOG_SERVICE_INITIATED_EVENT, checkApplicationVersion);
				}
			}
			
			private static function peripheralTypeSelected(event:DialogViewEvent):void {
				CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_INITIAL_SELECTION_G4_OR_G5_DONE, "true");
				if (event.index== 1) {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE, "G5");
					if (BluetoothLE.service.centralManager.state == BluetoothLEState.STATE_ON) {
						if (!BluetoothLE.service.centralManager.isScanning) {
							BluetoothService.startScanning();
						}
					}
					showG5InfoScreen();
				} else if (event.index == 2) {
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE, "G4");
					showG4InfoScreen();
				}
			}
			
			private static function showG4InfoScreen():void {
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G4_INFO_SCREEN_SHOWN) == "false") {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"info"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"info_screen_1"))//info about buttons top right corner
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert);
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G4_INFO_SCREEN_SHOWN,"true");
				}
			}
			
			private static function showG5InfoScreen():void {
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_INFO_SCREEN_SHOWN) == "false") {
					var message:String = ModelLocator.resourceManagerInstance.getString('homeview',"info_screen_2");
					if (Sensor.getActiveSensor() == null) {
						message += "\n\n" + ModelLocator.resourceManagerInstance.getString('homeview',"info_screen_2_start_sensor");
					}
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"info"))
						.setMessage(message)//info about buttons top right corner
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert);
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_G5_INFO_SCREEN_SHOWN,"true");
				}
			}
			
			private static function dialogServiceInitiated(event:Event):void {
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LICENSE_INFO_CONFIRMED) == "false") {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle("xDrip for iOS")
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview', "licenseinfo"))//info about buttons top right corner
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 1)
						.build()
					);
					alert.addEventListener(DialogViewEvent.CLOSED, licenseInfoConfirmed);
					DialogService.addDialog(alert);
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_LICENSE_INFO_CONFIRMED,"true");
				} else {
					licenseInfoConfirmed(null);
				}
			}
			
			private static function licenseInfoConfirmed(ev:Event):void {
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_INITIAL_SELECTION_G4_OR_G5_DONE) == "false") {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"selectG4_or_G5_title"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"selectG4_or_G5"))//info about buttons top right corner
						.addOption(ModelLocator.resourceManagerInstance.getString('general',"yes"), DialogAction.STYLE_POSITIVE, 1)
						.addOption(ModelLocator.resourceManagerInstance.getString('general',"no"), DialogAction.STYLE_POSITIVE, 2)
						.build()
					);
					alert.addEventListener(DialogViewEvent.CLOSED, peripheralTypeSelected);
					alert.addEventListener(DialogViewEvent.CANCELLED, peripheralTypeSelected);
					DialogService.addDialog(alert);
					CommonSettings.setCommonSetting(CommonSettings.COMMON_SETTING_INITIAL_SELECTION_G4_OR_G5_DONE,"true");
				}
			}
			
			private function bluetoothDeviceConnectionCompleted(event:BlueToothServiceEvent):void {
				if (!BluetoothService.isDexcomG5)
					currentState = "bluetoothgreen";
				if (!_peripheralConnected) {
					_peripheralConnected = true;
					peripheralConnectionStatusChangeTimestamp = (new Date()).valueOf();
				}
				if (!(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) == "G5")) {
					NotificationService.updateAllNotifications(null);
				}
			}
			
			private function userInitiatedScanningSucceeded(event:PeripheralEvent):void {
				if (scanningWasUserInitiated) {
					scanningWasUserInitiated = false;
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"scan_for_device"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"connected_to_peripheral_device_id_stored"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						
						.build()
					);
					DialogService.addDialog(alert, 30);
				}
			}
			
			private function central_peripheralDisconnectHandler(event:PeripheralEvent):void {
				if (_peripheralConnected) {
					_peripheralConnected = false;
					peripheralConnectionStatusChangeTimestamp = (new Date()).valueOf();
				}
				if (!(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) == "G5")) {
					NotificationService.updateAllNotifications(null);
				}
				
				if (!BluetoothService.isDexcomG5) {
					if ((BluetoothLE.service.centralManager.state == BluetoothLEState.STATE_ON) && BlueToothDevice.known() && ((new Date().valueOf() - peripheralConnectionStatusChangeTimestamp) < DELAY_FOR_CHECKING_BGREADING_IN_SECONDS)) {
						currentState = "bluetoothorange";
					} else {
						currentState = "bluetoothred";
					}
				}
			}
			
			private function bluetoothStateChangedHandler(event:BluetoothLEEvent):void {
				if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_PERIPHERAL_TYPE) == "G5") {
					currentState = "G5";
					return;
				}
				if (BluetoothLE.service.centralManager.state == BluetoothLEState.STATE_ON) {
					if (BluetoothService.bluetoothPeripheralActive()) {
						if (_peripheralConnected) {
							//peripheral is known in bluetoothservice and it is connected
							currentState = "bluetoothgreen";
						} else {
							if ((new Date().valueOf() - peripheralConnectionStatusChangeTimestamp) > DELAY_FOR_CHECKING_BGREADING_IN_SECONDS) {
								//peripheral is known, but not active, and inactive since more than max time
								currentState = "bluetoothred";
							} else {
								//peripheral is known, but not active, orange
								currentState = "bluetoothorange";
							}
						}
					} else {//bluetoothperipheral not known in bluetoothservice, but maybe a device name is known in bluetoothdevice
						if (BlueToothDevice.known() && ((new Date().valueOf() - peripheralConnectionStatusChangeTimestamp) < DELAY_FOR_CHECKING_BGREADING_IN_SECONDS)) {
							//we know a device, we just didn't scan it yet, good for orange
							currentState = "bluetoothorange";
						} else {
							//we don't know a device yet, scanning for new device still needs to happen, that's red 
							currentState = "bluetoothred";
						}
					}
				} else {
					//definitely a case for red, because bluetooth is not on
					currentState = "bluetoothred";
				}
				
			}
			
			private function blueToothServiceInitiated(be:BlueToothServiceEvent):void {
				BluetoothService.instance.addEventListener(BlueToothServiceEvent.BLUETOOTH_DEVICE_CONNECTION_COMPLETED, bluetoothDeviceConnectionCompleted);
				BluetoothLE.service.centralManager.addEventListener(PeripheralEvent.DISCONNECT, central_peripheralDisconnectHandler);
				BluetoothLE.service.addEventListener(BluetoothLEEvent.STATE_CHANGED, bluetoothStateChangedHandler);
				//bluetooth service is initiated
				//force now a check if the icon needs tobe changed by calling bluetoothStateChangedHandler, even though it may not have changed
				bluetoothStateChangedHandler(null);
			}
			
			private function transmitterServiceBGReadingEventReceived(be:TransmitterServiceEvent):void {
				displayCurrentInfoFromReading();
			}
			
			private function restartCurrentInfoUpdateTimer():void {
				if (currentInfoUpdateTimer != null) {
					if (currentInfoUpdateTimer.running) {
						currentInfoUpdateTimer.stop();
					}
				}
				currentInfoUpdateTimer = new Timer(UPDATE_DISPLAY_INFO_EVERY_X_SECONDS * 1000, 1);
				currentInfoUpdateTimer.addEventListener(TimerEvent.TIMER, currentInfoUpdateTimerExpired);
				currentInfoUpdateTimer.start();
			}
			
			private function currentInfoUpdateTimerExpired(event:Event):void {
				displayCurrentInfoFromReading();
				restartCurrentInfoUpdateTimer();
			}
			
			private function initialCalibrationEventReceived(be:CalibrationServiceEvent):void {
				displayCurrentInfoFromReading();
				_calibrateButtonActive = true;
			}
			
			private function newCalibrationEventReceived(be:CalibrationServiceEvent):void {
				displayCurrentInfoFromReading();
			}
			
			protected function initializeHandler(event:FlexEvent):void
			{
				//instantiate modellocator because event listeners are being added to the database class, to receive logging information
				ModelLocator.instance;
			}
			
			private function displayCurrentInfoFromReading(event:Event = null):void {
				var lastBgReading:BgReading = BgReading.lastNoSensor();
				var estimate:Number = new Number(0);
				if (lastBgReading == null) {
					currentBgLabelText = "---";
					currentBgLabellinethrough = false;//currentBgLabel.setStyle("lineThrough","false");
					currentBgLabel.invalidateSize();
					minutesAgoText = "";
					deltaValueText = "";
				} else {
					if ((new Date().getTime()) - (60000 * 11) - lastBgReading.timestamp > 0) {
						estimate = lastBgReading.calculatedValue;
						currentBgLabelText = BgGraphBuilder.unitizedString(estimate, CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true");
						currentBgLabellinethrough = true;//currentBgLabel.setStyle("lineThrough","true");
						currentBgLabel.invalidateSize();
					} else {
						estimate = lastBgReading.calculatedValue;
						currentBgLabelText = BgGraphBuilder.unitizedString(estimate, CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_DO_MGDL) == "true");
						var slope_arrow:String = lastBgReading.slopeArrow();
						if (lastBgReading.hideSlope) {
							slope_arrow = "";
						}
						currentBgLabelText += " " + slope_arrow;
						currentBgLabellinethrough = false;
						currentBgLabel.invalidateSize();
					}
					var minutes:int = ((new Date()).valueOf() - lastBgReading.timestamp) / (60 * 1000);
					minutesAgoText = minutes + 
						(minutes == 1 ? 
							" " + ModelLocator.resourceManagerInstance.getString('homeview','minuteago')
							:
							" " + ModelLocator.resourceManagerInstance.getString('homeview','minutesago'));
					deltaValueText = BgGraphBuilder.unitizedDeltaString(true, true);
					if(estimate <= new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_LOW_MARK))) {
						currentBgLabelColor = 0xFF0000;
					} else if (estimate >= new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_HIGH_MARK))) {
						currentBgLabelColor = 0xFFFF00;
					} else {
						currentBgLabelColor = 0xFFFFFF;
					}
				}
			}
			
			private function calibrationButtonClicked(e:MouseEvent = null):void {
				if (!_calibrateButtonActive)
					return;
				CalibrationService.calibrationOnRequest();
			}
			
			private function bluetoothButtonClicked(e:MouseEvent = null):void {
				var actionsheetBuilder:ActionSheetBuilder = new ActionSheetBuilder();;
				
				actionsheetBuilder.addAction(ModelLocator.resourceManagerInstance.getString('homeview','view_device_status'), DialogAction.STYLE_DEFAULT, ACTION_SHEET_INDEX_FOR_STATUS);
				
				if (!BluetoothService.bluetoothPeripheralActive() && !BluetoothService.isDexcomG5) {
					//this is the case where bluetoothdevice is known or not, time for a scan
					actionsheetBuilder.addAction(ModelLocator.resourceManagerInstance.getString('homeview','scan_for_device'), DialogAction.STYLE_DEFAULT, ACTION_SHEET_INDEX_FOR_SCAN_FOR_DEVICE);
				} 
				
				if (BlueToothDevice.known() && !BluetoothService.isDexcomG5) {
					actionsheetBuilder.addAction(ModelLocator.resourceManagerInstance.getString('homeview','forget_device'), DialogAction.STYLE_DEFAULT, ACTION_SHEET_INDEX_FOR_FORGET_DEVICE);
				}
				
				if (Sensor.getActiveSensor() == null) {
					actionsheetBuilder.addAction(ModelLocator.resourceManagerInstance.getString('homeview','start_sensor'), DialogAction.STYLE_DEFAULT, ACTION_SHEET_INDEX_FOR_START_SENSOR);
				} else {
					actionsheetBuilder.addAction(ModelLocator.resourceManagerInstance.getString('homeview','stop_sensor'), DialogAction.STYLE_DEFAULT, ACTION_SHEET_INDEX_FOR_STOP_SENSOR);
				}
				
				actionsheetBuilder.addAction(ModelLocator.resourceManagerInstance.getString('general','cancel'),DialogAction.STYLE_CANCEL, ACTION_SHEET_INDEX_FOR_CANCEL);
				
				var actionSheet:DialogView = Dialog.service.create(actionsheetBuilder.build());
				actionSheet.addEventListener(DialogViewEvent.CLOSED, actionSheet_closedHandler);
				actionSheet.show();
			}
			
			private function actionSheet_closedHandler( event:DialogViewEvent ):void {
				var actionSheet:DialogView = DialogView(event.currentTarget);
				actionSheet.dispose();
				
				if (event.index == ACTION_SHEET_INDEX_FOR_SCAN_FOR_DEVICE) {
					//TODO add a check if bluetooth is on, if not give warning message and don't start scanning
					if (BluetoothLE.service.centralManager.state == BluetoothLEState.STATE_ON) {
						BluetoothService.instance.addEventListener(BlueToothServiceEvent.STOPPED_SCANNING, scanningStopped);
						BluetoothLE.service.centralManager.addEventListener(PeripheralEvent.CONNECT, userInitiatedScanningSucceeded);
						scanningWasUserInitiated = true;
						BluetoothService.startScanning();
						var alert:DialogView = Dialog.service.create(
							new AlertBuilder()
							.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"scan_for_device"))
							.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"scanning_started_message"))
							.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
							.build()
						);
						DialogService.addDialog(alert, 30);
					} else {
						var alert:DialogView = Dialog.service.create(
							new AlertBuilder()
							.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"scanning_failed_tile"))
							.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"bluetooth_not_switched_on"))
							.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
							.build()
						);
						DialogService.addDialog(alert, 30);
					}
				} else if (event.index == ACTION_SHEET_INDEX_FOR_FORGET_DEVICE) {
					BlueToothDevice.forgetBlueToothDevice();
					currentState = "bluetoothred";
					
				} else if (event.index == ACTION_SHEET_INDEX_FOR_START_SENSOR) {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"start_sensor"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"start_sensor_warning_correct_timing"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
						.build()
					);
					alert.addEventListener(DialogViewEvent.CLOSED, startSensorWarningConfirmed);
					alert.addEventListener(DialogViewEvent.CANCELLED, startSensorWarningCancelled);
					DialogService.addDialog(alert, 60);
				} else if (event.index == ACTION_SHEET_INDEX_FOR_STOP_SENSOR) {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"stop_sensor"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"stop_sensor_ask_confirmation"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
						.build()
					);
					alert.addEventListener(DialogViewEvent.CLOSED, stopSensorConfirmation);
					alert.addEventListener(DialogViewEvent.CANCELLED, stopSensorcancellation);
					DialogService.addDialog(alert, 60);
				} else if (event.index == ACTION_SHEET_INDEX_FOR_STATUS) {
					var message:String = ModelLocator.resourceManagerInstance.getString('homeview', "status_info_sensor_start");
					var dateFormatterForSensorStartTimeAndDate:DateTimeFormatter = new DateTimeFormatter();
					dateFormatterForSensorStartTimeAndDate.dateTimePattern = ModelLocator.resourceManagerInstance.getString('homeview','datetimepatternforstatusinfo');
					dateFormatterForSensorStartTimeAndDate.useUTC = false;
					dateFormatterForSensorStartTimeAndDate.setStyle("locale",Capabilities.language.substr(0,2));
					if (Sensor.getActiveSensor() != null) {
						message += " " + dateFormatterForSensorStartTimeAndDate.format(new Date(Sensor.getActiveSensor().startedAt));
					} else {
						message += " " + ModelLocator.resourceManagerInstance.getString('homeview', "status_info_sensor_not_started");
					}
					message += "\n\n";
					message += ModelLocator.resourceManagerInstance.getString('homeview','status_info_device_name');
					if (BlueToothDevice.known()) {
						message += " " + BlueToothDevice.name;
					} else {
						message += " " + ModelLocator.resourceManagerInstance.getString('homeview','status_info_no_device_known');
					}
					message += "\n\n";
					if (BluetoothService.isDexcomG5) {
						message += ModelLocator.resourceManagerInstance.getString('homeview','home_view_transmitter_status_info_G5_title') + '\n';
						message += ModelLocator.resourceManagerInstance.getString('homeview','home_view_transmitter_status_info_G5_STATUS') + " " + 
							CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_STATUS);
						if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_STATUS) != "unknown")
							message += " (" + G5Model.TransmitterStatus.getBatteryLevel(new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_STATUS))) + 
							")" + '\n'; 
						message += ModelLocator.resourceManagerInstance.getString('homeview','home_view_transmitter_status_info_G5_VOLTAGEA') + " " + 
							CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEA);
						if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEA) != "unknown")
							message += " (" + (new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEA)) < G5Model.TransmitterStatus.LOW_BATTERY_WARNING_LEVEL_VOLTAGEA ? "BAD":"NORMAL") + 
							")" + '\n';
						message += ModelLocator.resourceManagerInstance.getString('homeview','home_view_transmitter_status_info_G5_VOLTAGEB') + " " + 
							CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEB);
						if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEB) != "unknown")
							message += " (" + (new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_VOLTAGEB)) < G5Model.TransmitterStatus.LOW_BATTERY_WARNING_LEVEL_VOLTAGEB ? "BAD":"NORMAL") + 
							")" + '\n';
						message += ModelLocator.resourceManagerInstance.getString('homeview','home_view_transmitter_status_info_G5_RESIST') + " " + 
							CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_RESIST);
						if (CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_RESIST) != "unknown")
							message += " (" + (new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_RESIST)) > G5Model.TransmitterStatus.RESIST_BAD ? "BAD":(new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_RESIST)) > G5Model.TransmitterStatus.RESIST_NOTICE ? "NOTICE":(new Number(CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G5_RESIST)) > G5Model.TransmitterStatus.RESIST_NORMAL ? "NORMAL":"GOOD"))) + 
							")" + '\n';
					} else {
						message += ModelLocator.resourceManagerInstance.getString('homeview','status_info_transmitter_battery_level');
						var batteryLevel:String = CommonSettings.getCommonSetting(CommonSettings.COMMON_SETTING_G4_TRANSMITTER_BATTERY_VOLTAGE);
						if (batteryLevel == "0") {
							batteryLevel = ModelLocator.resourceManagerInstance.getString('homeview','status_info_transmitter_battery_level_unknown');
						} else {
							message += " " + batteryLevel;
							message += " (" + G4Model.TransmitterStatus.getBatteryLevel(new Number(batteryLevel)) + ")";
						}
					}
					
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"status_title"))
						.setMessage(message)
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert, 60);
				}
			}
			
			private function startSensorWarningCancelled(event:DialogViewEvent):void {
			}
			
			private function startSensorWarningConfirmed(event:DialogViewEvent):void {
				if (event.index == 1) {
					return;
				}
				sensorStartYear = 0; sensorStartMonth = 0; sensorStartDate = 0; sensorStartHours = 0; sensorStartMinutes = 0; sensorStartSeconds = 0;
				userSelectedTime = false;
				var dateTime:DateTimeDialogView = Dialog.service.create(
					new DateTimeDialogBuilder()
					.setMode(DialogType.MODE_DATE)
					.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"start_sensor_title_get_date"))
					.setAcceptLabel("Ok")
					.setCancelable(true)
					.setCancelLabel(ModelLocator.resourceManagerInstance.getString('general','cancel'))
					.build()
				);
				dateTime.addEventListener(DialogViewEvent.CLOSED, date_closedRequestHandler);
				dateTime.addEventListener(DialogDateTimeEvent.SELECTED, date_selectedHandler);
				//dateTime.addEventListener(DialogDateTimeEvent.CHANGED, dateTime_changedHandler);Not needed, this is triggered whenever the user clicks another date, but hasn't closed
				DialogService.addDialog(dateTime);
			}
			
			private static function stopSensorcancellation(event:DialogViewEvent):void {
			}
			
			private static function stopSensorConfirmation(event:DialogViewEvent):void {
				if (event.index == 1) {
					return;
				}
				Sensor.stopSensor();
				NotificationService.updateAllNotifications(null);
				_calibrateButtonActive = false;
			}
			
			private function date_selectedHandler( event:DialogDateTimeEvent ):void
			{
				sensorStartDate = event.date.date;
				sensorStartMonth = event.date.month;
				sensorStartYear = event.date.fullYear;
			}
			
			private function date_closedRequestHandler(event:DialogViewEvent ):void
			{
				if (sensorStartYear == 0) {
					//use pressed cancel
					return;
				}
				var dateTime:DateTimeDialogView = DateTimeDialogView(event.currentTarget);
				dateTime.dispose();
				dateTime = Dialog.service.create(
					new DateTimeDialogBuilder()
					.setMode(DialogType.MODE_TIME)
					.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"start_sensor_title_get_time"))
					.setAcceptLabel("Ok")
					.setCancelable(true)
					.setCancelLabel(ModelLocator.resourceManagerInstance.getString('general','cancel'))
					.build()
				);
				dateTime.addEventListener(DialogViewEvent.CLOSED, time_closedRequestHandler);
				dateTime.addEventListener(DialogDateTimeEvent.SELECTED, time_selectedHandler);
				//dateTime.addEventListener(DialogDateTimeEvent.CHANGED, dateTime_changedHandler);Not needed, this is triggered whenever the user clicks another date, but hasn't closed
				DialogService.addDialog(dateTime);
			}
			
			private function time_selectedHandler( event:DialogDateTimeEvent ):void
			{
				sensorStartHours = event.date.hours;
				sensorStartMinutes = event.date.minutes;
				sensorStartSeconds = event.date.seconds;
				userSelectedTime = true;
			}
			
			private function time_closedRequestHandler( event:DialogViewEvent ):void {
				if (!userSelectedTime) {
					//use pressed cancel
					return;
				}
				
				var dateTime:DateTimeDialogView = DateTimeDialogView(event.currentTarget);
				dateTime.dispose();
				
				//ready to start the sensor
				var sensorStartTimeAsDate:Date = new Date(sensorStartYear, sensorStartMonth, sensorStartDate, sensorStartHours, sensorStartMinutes, sensorStartSeconds);
				var sensorStartTime:Number = sensorStartTimeAsDate.valueOf();
				if (sensorStartTime > (new Date()).valueOf() + 5 * 60 * 1000) {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"start_sensor"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"dont_start_with_time_in_future"))
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert, 60);
				} else {
					Sensor.startSensor(sensorStartTime);
					var actualTime:Number = (new Date()).valueOf();
					var timeOfCalibration:Number = 2 * 3600 * 1000 - (actualTime - sensorStartTime);
					var dateFormatter:DateTimeFormatter = new DateTimeFormatter();
					dateFormatter.dateTimePattern = ModelLocator.resourceManagerInstance.getString('homeview','timestamppattern_for_sensor_start_warning');
					dateFormatter.useUTC = false;
					dateFormatter.setStyle("locale",Capabilities.language.substr(0,2));
					var message:String;
					if (timeOfCalibration > 0) {
						message = ModelLocator.resourceManagerInstance.getString('homeview',"sensor_started_wait_needed_1");
						message += " " + dateFormatter.format(new Date(actualTime + timeOfCalibration)) + " ";
						message += ModelLocator.resourceManagerInstance.getString('homeview',"sensor_started_wait_needed_2");
					} else {
						message = ModelLocator.resourceManagerInstance.getString('homeview',"sensor_started_no_wait_needed");
					}
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"start_sensor"))
						.setMessage(message)
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert, 60);
				}
			}
			
			private static function scanningStopped(event:Event):void {
				if (!BluetoothService.bluetoothPeripheralActive()) {
					//create alert to get the user's input
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"scanning_failed_tile"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"scanning_failed")
							+
							(BlueToothDevice.known() ? (" " + ModelLocator.resourceManagerInstance.getString('homeview',"with_name") + " " + BlueToothDevice.name) + 
								"\n\n" + ModelLocator.resourceManagerInstance.getString('homeview',"explain_expected_device_name"): "")
						)
						.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
						.build()
					);
					DialogService.addDialog(alert, 30);			
				}
			}
			
			private static function checkApplicationVersion(event:Event = null):void {
				var newVersion:String = ModelLocator.resourceManagerInstance.getString('general',"version");
				var currentVersion:String = LocalSettings.getLocalSetting(LocalSettings.LOCAL_SETTING_APPLICATION_VERSION);
				if (currentVersion < newVersion) {
					if (currentVersion == '0.0.46') {
						var alert:DialogView = Dialog.service.create(
							new AlertBuilder()
							.setTitle(ModelLocator.resourceManagerInstance.getString('homeview',"info"))
							.setMessage(ModelLocator.resourceManagerInstance.getString('homeview',"info_additional_calibration_request_alert"))//info about buttons top right corner
							.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
							.build()
						);
						DialogService.addDialog(alert);
					}
					LocalSettings.setLocalSetting(LocalSettings.LOCAL_SETTING_APPLICATION_VERSION, newVersion); 
				}
			}
			
			
		]]>
	</fx:Script>
	<s:actionContent>
		<s:Button icon.bluetoothred="{ModelLocator.image_bluetooth_red}" icon.bluetoothgreen="{ModelLocator.image_bluetooth_green}" icon.bluetoothorange="{ModelLocator.image_bluetooth_orange}" icon.G5="{ModelLocator.image_G5}" click="bluetoothButtonClicked(event)"/>
		<s:Button icon="{ModelLocator.image_calibrate_active}" id="calibrateButton" alpha="{_calibrateButtonActive ? 1:0.25}" enabled="{_calibrateButtonActive}" click="calibrationButtonClicked(event)"/>
	</s:actionContent>
	
	<s:Group y="0" x="0" width="100%" height="100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Group width="100%" id="topGroup">
			<s:layout>
				<s:HorizontalLayout paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" gap="5" 
									horizontalAlign="right" verticalAlign="middle"/>
			</s:layout>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" gap="0" 
										horizontalAlign="left" verticalAlign="middle"/>
				</s:layout>
				<s:Group>
					<s:layout>
						<s:VerticalLayout>
							
						</s:VerticalLayout>
					</s:layout>
					<s:Label id = "minutesAgoLabelId" text="{minutesAgoText}"/>
					<s:Label id = "deltaValueLabelId" text="{deltaValueText}"/>
				</s:Group>
			</s:Group>
			<s:Label id = "currentBgLabel" text="{currentBgLabelText}" fontSize="60" lineThrough="{currentBgLabellinethrough}" color="{currentBgLabelColor}"/>
		</s:Group>
	</s:Group>
</s:View>
